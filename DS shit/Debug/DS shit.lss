
DS shit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000704  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000758  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000788  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d39  00000000  00000000  0000086c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000881  00000000  00000000  000015a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000718  00000000  00000000  00001e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000144  00000000  00000000  00002540  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000469  00000000  00000000  00002684  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006ad  00000000  00000000  00002aed  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000319a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 16 01 	call	0x22c	; 0x22c <main>
  7a:	0c 94 80 03 	jmp	0x700	; 0x700 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ds18b20_reset>:
 */
uint8_t ds18b20_reset() {
	uint8_t i;

	//low for 480us
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
  82:	85 b3       	in	r24, 0x15	; 21
  84:	8e 7f       	andi	r24, 0xFE	; 254
  86:	85 bb       	out	0x15, r24	; 21
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
  88:	84 b3       	in	r24, 0x14	; 20
  8a:	81 60       	ori	r24, 0x01	; 1
  8c:	84 bb       	out	0x14, r24	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	80 ea       	ldi	r24, 0xA0	; 160
  90:	8a 95       	dec	r24
  92:	f1 f7       	brne	.-4      	; 0x90 <ds18b20_reset+0xe>
	_delay_us(480);

	//release line and wait for 60uS
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
  94:	84 b3       	in	r24, 0x14	; 20
  96:	8e 7f       	andi	r24, 0xFE	; 254
  98:	84 bb       	out	0x14, r24	; 20
  9a:	94 e1       	ldi	r25, 0x14	; 20
  9c:	9a 95       	dec	r25
  9e:	f1 f7       	brne	.-4      	; 0x9c <ds18b20_reset+0x1a>
	_delay_us(60);

	//get value and wait 420us
	i = (DS18B20_PIN & (1<<DS18B20_DQ));
  a0:	83 b3       	in	r24, 0x13	; 19
  a2:	81 70       	andi	r24, 0x01	; 1
  a4:	9c e8       	ldi	r25, 0x8C	; 140
  a6:	9a 95       	dec	r25
  a8:	f1 f7       	brne	.-4      	; 0xa6 <ds18b20_reset+0x24>
	_delay_us(420);

	//return the read value, 0=ok, 1=error
	return i;
}
  aa:	08 95       	ret

000000ac <ds18b20_writebit>:
/*
 * write one bit
 */
void ds18b20_writebit(uint8_t bit){
	//low for 1uS
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
  ac:	95 b3       	in	r25, 0x15	; 21
  ae:	9e 7f       	andi	r25, 0xFE	; 254
  b0:	95 bb       	out	0x15, r25	; 21
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
  b2:	94 b3       	in	r25, 0x14	; 20
  b4:	91 60       	ori	r25, 0x01	; 1
  b6:	94 bb       	out	0x14, r25	; 20
  b8:	00 00       	nop
	_delay_us(1);

	//if we want to write 1, release the line (if not will keep low)
	if(bit)
  ba:	88 23       	and	r24, r24
  bc:	19 f0       	breq	.+6      	; 0xc4 <ds18b20_writebit+0x18>
		DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
  be:	84 b3       	in	r24, 0x14	; 20
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	84 bb       	out	0x14, r24	; 20
  c4:	84 e1       	ldi	r24, 0x14	; 20
  c6:	8a 95       	dec	r24
  c8:	f1 f7       	brne	.-4      	; 0xc6 <ds18b20_writebit+0x1a>

	//wait 60uS and release the line
	_delay_us(60);
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
  ca:	84 b3       	in	r24, 0x14	; 20
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	84 bb       	out	0x14, r24	; 20
  d0:	08 95       	ret

000000d2 <ds18b20_readbit>:
 */
uint8_t ds18b20_readbit(void){
	uint8_t bit=0;

	//low for 1uS
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
  d2:	85 b3       	in	r24, 0x15	; 21
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	85 bb       	out	0x15, r24	; 21
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
  d8:	84 b3       	in	r24, 0x14	; 20
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	84 bb       	out	0x14, r24	; 20
  de:	00 00       	nop
	_delay_us(1);

	//release line and wait for 14uS
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
  e0:	84 b3       	in	r24, 0x14	; 20
  e2:	8e 7f       	andi	r24, 0xFE	; 254
  e4:	84 bb       	out	0x14, r24	; 20
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <ds18b20_readbit+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <ds18b20_readbit+0x1c>
	_delay_us(14);

	//read the value
	if(DS18B20_PIN & (1<<DS18B20_DQ))
  ee:	98 99       	sbic	0x13, 0	; 19
  f0:	02 c0       	rjmp	.+4      	; 0xf6 <ds18b20_readbit+0x24>

/*
 * read one bit
 */
uint8_t ds18b20_readbit(void){
	uint8_t bit=0;
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <ds18b20_readbit+0x26>
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
	_delay_us(14);

	//read the value
	if(DS18B20_PIN & (1<<DS18B20_DQ))
		bit=1;
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	9f e0       	ldi	r25, 0x0F	; 15
  fa:	9a 95       	dec	r25
  fc:	f1 f7       	brne	.-4      	; 0xfa <ds18b20_readbit+0x28>

	//wait 45uS and return read value
	_delay_us(45);
	return bit;
}
  fe:	08 95       	ret

00000100 <ds18b20_writebyte>:

/*
 * write one byte
 */
void ds18b20_writebyte(uint8_t byte){
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	c8 2f       	mov	r28, r24
	uint8_t i=8;
 106:	88 e0       	ldi	r24, 0x08	; 8
	while(i--){
 108:	06 c0       	rjmp	.+12     	; 0x116 <ds18b20_writebyte+0x16>
		ds18b20_writebit(byte&1);
 10a:	8c 2f       	mov	r24, r28
 10c:	81 70       	andi	r24, 0x01	; 1
 10e:	0e 94 56 00 	call	0xac	; 0xac <ds18b20_writebit>
		byte >>= 1;
 112:	c6 95       	lsr	r28
/*
 * write one byte
 */
void ds18b20_writebyte(uint8_t byte){
	uint8_t i=8;
	while(i--){
 114:	8d 2f       	mov	r24, r29
 116:	df ef       	ldi	r29, 0xFF	; 255
 118:	d8 0f       	add	r29, r24
 11a:	81 11       	cpse	r24, r1
 11c:	f6 cf       	rjmp	.-20     	; 0x10a <ds18b20_writebyte+0xa>
		ds18b20_writebit(byte&1);
		byte >>= 1;
	}
}
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	08 95       	ret

00000124 <ds18b20_readbyte>:

/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
	uint8_t i=8, n=0;
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	98 e0       	ldi	r25, 0x08	; 8
	while(i--){
 12c:	0a c0       	rjmp	.+20     	; 0x142 <ds18b20_readbyte+0x1e>
		n >>= 1;
 12e:	c8 2f       	mov	r28, r24
 130:	c6 95       	lsr	r28
		n |= (ds18b20_readbit()<<7);
 132:	0e 94 69 00 	call	0xd2	; 0xd2 <ds18b20_readbit>
 136:	20 e8       	ldi	r18, 0x80	; 128
 138:	82 9f       	mul	r24, r18
 13a:	c0 01       	movw	r24, r0
 13c:	11 24       	eor	r1, r1
 13e:	8c 2b       	or	r24, r28
/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
	uint8_t i=8, n=0;
	while(i--){
 140:	9d 2f       	mov	r25, r29
 142:	df ef       	ldi	r29, 0xFF	; 255
 144:	d9 0f       	add	r29, r25
 146:	91 11       	cpse	r25, r1
 148:	f2 cf       	rjmp	.-28     	; 0x12e <ds18b20_readbyte+0xa>
		n >>= 1;
		n |= (ds18b20_readbit()<<7);
	}
	return n;
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <ds18b20_gettemp>:

/*
 * get temperature
 */
double ds18b20_gettemp() {
 150:	cf 93       	push	r28
	uint8_t temperature_l;
	uint8_t temperature_h;
	double retd = 0;

	#if DS18B20_STOPINTERRUPTONREAD == 1
	cli();
 152:	f8 94       	cli
	#endif

	ds18b20_reset(); //reset
 154:	0e 94 41 00 	call	0x82	; 0x82 <ds18b20_reset>
	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
 158:	8c ec       	ldi	r24, 0xCC	; 204
 15a:	0e 94 80 00 	call	0x100	; 0x100 <ds18b20_writebyte>
	ds18b20_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
 15e:	84 e4       	ldi	r24, 0x44	; 68
 160:	0e 94 80 00 	call	0x100	; 0x100 <ds18b20_writebyte>

	while(!ds18b20_readbit()); //wait until conversion is complete
 164:	0e 94 69 00 	call	0xd2	; 0xd2 <ds18b20_readbit>
 168:	88 23       	and	r24, r24
 16a:	e1 f3       	breq	.-8      	; 0x164 <ds18b20_gettemp+0x14>

	ds18b20_reset(); //reset
 16c:	0e 94 41 00 	call	0x82	; 0x82 <ds18b20_reset>
	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
 170:	8c ec       	ldi	r24, 0xCC	; 204
 172:	0e 94 80 00 	call	0x100	; 0x100 <ds18b20_writebyte>
	ds18b20_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
 176:	8e eb       	ldi	r24, 0xBE	; 190
 178:	0e 94 80 00 	call	0x100	; 0x100 <ds18b20_writebyte>

	//read 2 byte from scratchpad
	temperature_l = ds18b20_readbyte();
 17c:	0e 94 92 00 	call	0x124	; 0x124 <ds18b20_readbyte>
 180:	c8 2f       	mov	r28, r24
	temperature_h = ds18b20_readbyte();
 182:	0e 94 92 00 	call	0x124	; 0x124 <ds18b20_readbyte>

	#if DS18B20_STOPINTERRUPTONREAD == 1
	sei();
 186:	78 94       	sei
	#endif

	//convert the 12 bit value obtained
	retd = ( ( temperature_h << 8 ) + temperature_l ) * 0.0625;
 188:	68 2f       	mov	r22, r24
 18a:	70 e0       	ldi	r23, 0x00	; 0
 18c:	76 2f       	mov	r23, r22
 18e:	66 27       	eor	r22, r22
 190:	6c 0f       	add	r22, r28
 192:	71 1d       	adc	r23, r1
 194:	07 2e       	mov	r0, r23
 196:	00 0c       	add	r0, r0
 198:	88 0b       	sbc	r24, r24
 19a:	99 0b       	sbc	r25, r25
 19c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__floatsisf>
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e8       	ldi	r20, 0x80	; 128
 1a6:	5d e3       	ldi	r21, 0x3D	; 61
 1a8:	0e 94 ef 02 	call	0x5de	; 0x5de <__mulsf3>

	return retd;
}
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <difftemp>:
#include "ds18b20.h"
#include "std_macros.h"
const int servoPin = 5; // D5

unsigned char difftemp(double old,double new)
{
 1b0:	8f 92       	push	r8
 1b2:	9f 92       	push	r9
 1b4:	af 92       	push	r10
 1b6:	bf 92       	push	r11
 1b8:	cf 92       	push	r12
 1ba:	df 92       	push	r13
 1bc:	ef 92       	push	r14
 1be:	ff 92       	push	r15
 1c0:	6b 01       	movw	r12, r22
 1c2:	7c 01       	movw	r14, r24
 1c4:	49 01       	movw	r8, r18
 1c6:	5a 01       	movw	r10, r20
	int x;

	x = (new > old) ? (new - old) : (old - new);
 1c8:	9b 01       	movw	r18, r22
 1ca:	ac 01       	movw	r20, r24
 1cc:	c5 01       	movw	r24, r10
 1ce:	b4 01       	movw	r22, r8
 1d0:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__gesf2>
 1d4:	18 16       	cp	r1, r24
 1d6:	4c f4       	brge	.+18     	; 0x1ea <difftemp+0x3a>
 1d8:	a7 01       	movw	r20, r14
 1da:	96 01       	movw	r18, r12
 1dc:	c5 01       	movw	r24, r10
 1de:	b4 01       	movw	r22, r8
 1e0:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
 1e4:	0e 94 26 02 	call	0x44c	; 0x44c <__fixsfsi>
 1e8:	08 c0       	rjmp	.+16     	; 0x1fa <difftemp+0x4a>
 1ea:	a5 01       	movw	r20, r10
 1ec:	94 01       	movw	r18, r8
 1ee:	c7 01       	movw	r24, r14
 1f0:	b6 01       	movw	r22, r12
 1f2:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
 1f6:	0e 94 26 02 	call	0x44c	; 0x44c <__fixsfsi>
		
	if(x>=0 && x<=4)
 1fa:	65 30       	cpi	r22, 0x05	; 5
 1fc:	71 05       	cpc	r23, r1
 1fe:	40 f0       	brcs	.+16     	; 0x210 <difftemp+0x60>
		return '0';
	else if (x>=5 && x<=9)
 200:	cb 01       	movw	r24, r22
 202:	05 97       	sbiw	r24, 0x05	; 5
 204:	05 97       	sbiw	r24, 0x05	; 5
 206:	30 f0       	brcs	.+12     	; 0x214 <difftemp+0x64>
		return '1';
	else if (x>=10)
 208:	6a 30       	cpi	r22, 0x0A	; 10
 20a:	71 05       	cpc	r23, r1
 20c:	2c f4       	brge	.+10     	; 0x218 <difftemp+0x68>
		return '2';
		
	
}
 20e:	05 c0       	rjmp	.+10     	; 0x21a <difftemp+0x6a>
	int x;

	x = (new > old) ? (new - old) : (old - new);
		
	if(x>=0 && x<=4)
		return '0';
 210:	80 e3       	ldi	r24, 0x30	; 48
 212:	03 c0       	rjmp	.+6      	; 0x21a <difftemp+0x6a>
	else if (x>=5 && x<=9)
		return '1';
 214:	81 e3       	ldi	r24, 0x31	; 49
 216:	01 c0       	rjmp	.+2      	; 0x21a <difftemp+0x6a>
	else if (x>=10)
		return '2';
 218:	82 e3       	ldi	r24, 0x32	; 50
		
	
}
 21a:	ff 90       	pop	r15
 21c:	ef 90       	pop	r14
 21e:	df 90       	pop	r13
 220:	cf 90       	pop	r12
 222:	bf 90       	pop	r11
 224:	af 90       	pop	r10
 226:	9f 90       	pop	r9
 228:	8f 90       	pop	r8
 22a:	08 95       	ret

0000022c <main>:
int main(void)
{
	double newtemp = 0, oldtemp = 0;
	CLR_BIT(DDRB,0);//input for ir
 22c:	87 b3       	in	r24, 0x17	; 23
 22e:	8e 7f       	andi	r24, 0xFE	; 254
 230:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRD,0);//LED 1
 232:	81 b3       	in	r24, 0x11	; 17
 234:	81 60       	ori	r24, 0x01	; 1
 236:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,1);//LED 2
 238:	81 b3       	in	r24, 0x11	; 17
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,2);//LED 3	
 23e:	81 b3       	in	r24, 0x11	; 17
 240:	84 60       	ori	r24, 0x04	; 4
 242:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,3);//LED 4
 244:	81 b3       	in	r24, 0x11	; 17
 246:	88 60       	ori	r24, 0x08	; 8
 248:	81 bb       	out	0x11, r24	; 17

	oldtemp=ds18b20_gettemp();
 24a:	0e 94 a8 00 	call	0x150	; 0x150 <ds18b20_gettemp>
 24e:	c6 2e       	mov	r12, r22
 250:	d7 2e       	mov	r13, r23
 252:	e8 2e       	mov	r14, r24
 254:	f9 2e       	mov	r15, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	2f e3       	ldi	r18, 0x3F	; 63
 258:	8d e0       	ldi	r24, 0x0D	; 13
 25a:	93 e0       	ldi	r25, 0x03	; 3
 25c:	21 50       	subi	r18, 0x01	; 1
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	90 40       	sbci	r25, 0x00	; 0
 262:	e1 f7       	brne	.-8      	; 0x25c <main+0x30>
 264:	00 c0       	rjmp	.+0      	; 0x266 <main+0x3a>
 266:	00 00       	nop
 268:	04 c0       	rjmp	.+8      	; 0x272 <main+0x46>
		return '2';
		
	
}
int main(void)
{
 26a:	cc 2e       	mov	r12, r28
 26c:	dd 2e       	mov	r13, r29
 26e:	e1 2e       	mov	r14, r17
 270:	f0 2e       	mov	r15, r16

	oldtemp=ds18b20_gettemp();
	_delay_ms(1000);//wait for the new reading to come in
	while(1) 
	{		
		newtemp = ds18b20_gettemp();
 272:	0e 94 a8 00 	call	0x150	; 0x150 <ds18b20_gettemp>
 276:	c6 2f       	mov	r28, r22
 278:	d7 2f       	mov	r29, r23
 27a:	18 2f       	mov	r17, r24
 27c:	09 2f       	mov	r16, r25
		int diffrant=difftemp(oldtemp,newtemp);
 27e:	26 2f       	mov	r18, r22
 280:	37 2f       	mov	r19, r23
 282:	48 2f       	mov	r20, r24
 284:	59 2f       	mov	r21, r25
 286:	6c 2d       	mov	r22, r12
 288:	7d 2d       	mov	r23, r13
 28a:	8e 2d       	mov	r24, r14
 28c:	9f 2d       	mov	r25, r15
 28e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <difftemp>
		switch(diffrant)
 292:	81 33       	cpi	r24, 0x31	; 49
 294:	71 f0       	breq	.+28     	; 0x2b2 <main+0x86>
 296:	82 33       	cpi	r24, 0x32	; 50
 298:	b1 f0       	breq	.+44     	; 0x2c6 <main+0x9a>
 29a:	80 33       	cpi	r24, 0x30	; 48
 29c:	09 f5       	brne	.+66     	; 0x2e0 <main+0xb4>
		{
			case '0':
			SET_BIT(PORTD,0);
 29e:	82 b3       	in	r24, 0x12	; 18
 2a0:	81 60       	ori	r24, 0x01	; 1
 2a2:	82 bb       	out	0x12, r24	; 18
			CLR_BIT(PORTD,1);
 2a4:	82 b3       	in	r24, 0x12	; 18
 2a6:	8d 7f       	andi	r24, 0xFD	; 253
 2a8:	82 bb       	out	0x12, r24	; 18
			CLR_BIT(PORTD,2);
 2aa:	82 b3       	in	r24, 0x12	; 18
 2ac:	8b 7f       	andi	r24, 0xFB	; 251
 2ae:	82 bb       	out	0x12, r24	; 18
			break;
 2b0:	17 c0       	rjmp	.+46     	; 0x2e0 <main+0xb4>
			case '1':
			SET_BIT(PORTD,1);
 2b2:	82 b3       	in	r24, 0x12	; 18
 2b4:	82 60       	ori	r24, 0x02	; 2
 2b6:	82 bb       	out	0x12, r24	; 18
			CLR_BIT(PORTD,0);
 2b8:	82 b3       	in	r24, 0x12	; 18
 2ba:	8e 7f       	andi	r24, 0xFE	; 254
 2bc:	82 bb       	out	0x12, r24	; 18
			CLR_BIT(PORTD,2);
 2be:	82 b3       	in	r24, 0x12	; 18
 2c0:	8b 7f       	andi	r24, 0xFB	; 251
 2c2:	82 bb       	out	0x12, r24	; 18
			break;
 2c4:	0d c0       	rjmp	.+26     	; 0x2e0 <main+0xb4>
			case '2':
			SET_BIT(PORTD,2);
 2c6:	82 b3       	in	r24, 0x12	; 18
 2c8:	84 60       	ori	r24, 0x04	; 4
 2ca:	82 bb       	out	0x12, r24	; 18
			CLR_BIT(PORTD,1);
 2cc:	82 b3       	in	r24, 0x12	; 18
 2ce:	8d 7f       	andi	r24, 0xFD	; 253
 2d0:	82 bb       	out	0x12, r24	; 18
			CLR_BIT(PORTD,0);
 2d2:	82 b3       	in	r24, 0x12	; 18
 2d4:	8e 7f       	andi	r24, 0xFE	; 254
 2d6:	82 bb       	out	0x12, r24	; 18
			timer1_wave_fastPWM(1);
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	90 e0       	ldi	r25, 0x00	; 0
 2dc:	0e 94 98 01 	call	0x330	; 0x330 <timer1_wave_fastPWM>
 2e0:	8f e4       	ldi	r24, 0x4F	; 79
 2e2:	93 ec       	ldi	r25, 0xC3	; 195
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <main+0xb8>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <main+0xbe>
 2ea:	00 00       	nop
		}	
		oldtemp=newtemp;
		_delay_ms(200);
		//IR
		unsigned char IR_READs = READ_BIT(PINB,0);
		if (IR_READs==1)
 2ec:	b0 9b       	sbis	0x16, 0	; 22
 2ee:	1c c0       	rjmp	.+56     	; 0x328 <main+0xfc>
 2f0:	8f e4       	ldi	r24, 0x4F	; 79
 2f2:	93 ec       	ldi	r25, 0xC3	; 195
 2f4:	01 97       	sbiw	r24, 0x01	; 1
 2f6:	f1 f7       	brne	.-4      	; 0x2f4 <main+0xc8>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <main+0xce>
 2fa:	00 00       	nop
		{
			_delay_ms(200);
			IR_READs=READ_BIT(PINB,0);
			
			if (IR_READs==1)
 2fc:	b0 9b       	sbis	0x16, 0	; 22
 2fe:	b5 cf       	rjmp	.-150    	; 0x26a <main+0x3e>
 300:	8f e4       	ldi	r24, 0x4F	; 79
 302:	93 ec       	ldi	r25, 0xC3	; 195
 304:	01 97       	sbiw	r24, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <main+0xd8>
 308:	00 c0       	rjmp	.+0      	; 0x30a <main+0xde>
 30a:	00 00       	nop
			{
				_delay_ms(200);
				IR_READs=READ_BIT(PINB,0);
 30c:	96 b3       	in	r25, 0x16	; 22
				SET_BIT(PORTD,3);
 30e:	82 b3       	in	r24, 0x12	; 18
 310:	88 60       	ori	r24, 0x08	; 8
 312:	82 bb       	out	0x12, r24	; 18
				
				if (IR_READs==1)
 314:	90 ff       	sbrs	r25, 0
 316:	a9 cf       	rjmp	.-174    	; 0x26a <main+0x3e>
				{
					timer1_wave_fastPWM(1);
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 98 01 	call	0x330	; 0x330 <timer1_wave_fastPWM>
					SET_BIT(PORTD,2);
 320:	82 b3       	in	r24, 0x12	; 18
 322:	84 60       	ori	r24, 0x04	; 4
 324:	82 bb       	out	0x12, r24	; 18
 326:	a1 cf       	rjmp	.-190    	; 0x26a <main+0x3e>
				}
			}
		}
		else 
		{
			CLR_BIT(PORTD,3);
 328:	82 b3       	in	r24, 0x12	; 18
 32a:	87 7f       	andi	r24, 0xF7	; 247
 32c:	82 bb       	out	0x12, r24	; 18
 32e:	9d cf       	rjmp	.-198    	; 0x26a <main+0x3e>

00000330 <timer1_wave_fastPWM>:
}

void timer1_wave_fastPWM(double value)
{
	/* set OC1A as output pin */
	SET_BIT(DDRD,5);
 330:	21 b3       	in	r18, 0x11	; 17
 332:	20 62       	ori	r18, 0x20	; 32
 334:	21 bb       	out	0x11, r18	; 17
	/* select fast PWM mode*/
	SET_BIT(TCCR1A,WGM11);
 336:	2f b5       	in	r18, 0x2f	; 47
 338:	22 60       	ori	r18, 0x02	; 2
 33a:	2f bd       	out	0x2f, r18	; 47
	SET_BIT(TCCR1B,WGM12);
 33c:	2e b5       	in	r18, 0x2e	; 46
 33e:	28 60       	ori	r18, 0x08	; 8
 340:	2e bd       	out	0x2e, r18	; 46
	SET_BIT(TCCR1B,WGM13);
 342:	2e b5       	in	r18, 0x2e	; 46
 344:	20 61       	ori	r18, 0x10	; 16
 346:	2e bd       	out	0x2e, r18	; 46
	/* load a value in OCR1A,ICR1 */
	OCR1A=value*1000;
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	4a e7       	ldi	r20, 0x7A	; 122
 34e:	54 e4       	ldi	r21, 0x44	; 68
 350:	0e 94 ef 02 	call	0x5de	; 0x5de <__mulsf3>
 354:	0e 94 2d 02 	call	0x45a	; 0x45a <__fixunssfsi>
 358:	7b bd       	out	0x2b, r23	; 43
 35a:	6a bd       	out	0x2a, r22	; 42
	ICR1=19999;
 35c:	8f e1       	ldi	r24, 0x1F	; 31
 35e:	9e e4       	ldi	r25, 0x4E	; 78
 360:	97 bd       	out	0x27, r25	; 39
 362:	86 bd       	out	0x26, r24	; 38
	/* select timer clock, no prescaling */
	SET_BIT(TCCR1B,CS10);
 364:	8e b5       	in	r24, 0x2e	; 46
 366:	81 60       	ori	r24, 0x01	; 1
 368:	8e bd       	out	0x2e, r24	; 46
	/* clear OC1A on compare match, set OC1A at BOTTOM,(non inverting mode)*/
	SET_BIT(TCCR1A,COM1A1);
 36a:	8f b5       	in	r24, 0x2f	; 47
 36c:	80 68       	ori	r24, 0x80	; 128
 36e:	8f bd       	out	0x2f, r24	; 47
 370:	08 95       	ret

00000372 <__subsf3>:
 372:	50 58       	subi	r21, 0x80	; 128

00000374 <__addsf3>:
 374:	bb 27       	eor	r27, r27
 376:	aa 27       	eor	r26, r26
 378:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__addsf3x>
 37c:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_round>
 380:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_pscA>
 384:	38 f0       	brcs	.+14     	; 0x394 <__addsf3+0x20>
 386:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_pscB>
 38a:	20 f0       	brcs	.+8      	; 0x394 <__addsf3+0x20>
 38c:	39 f4       	brne	.+14     	; 0x39c <__addsf3+0x28>
 38e:	9f 3f       	cpi	r25, 0xFF	; 255
 390:	19 f4       	brne	.+6      	; 0x398 <__addsf3+0x24>
 392:	26 f4       	brtc	.+8      	; 0x39c <__addsf3+0x28>
 394:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_nan>
 398:	0e f4       	brtc	.+2      	; 0x39c <__addsf3+0x28>
 39a:	e0 95       	com	r30
 39c:	e7 fb       	bst	r30, 7
 39e:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_inf>

000003a2 <__addsf3x>:
 3a2:	e9 2f       	mov	r30, r25
 3a4:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_split3>
 3a8:	58 f3       	brcs	.-42     	; 0x380 <__addsf3+0xc>
 3aa:	ba 17       	cp	r27, r26
 3ac:	62 07       	cpc	r22, r18
 3ae:	73 07       	cpc	r23, r19
 3b0:	84 07       	cpc	r24, r20
 3b2:	95 07       	cpc	r25, r21
 3b4:	20 f0       	brcs	.+8      	; 0x3be <__addsf3x+0x1c>
 3b6:	79 f4       	brne	.+30     	; 0x3d6 <__addsf3x+0x34>
 3b8:	a6 f5       	brtc	.+104    	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3ba:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__fp_zero>
 3be:	0e f4       	brtc	.+2      	; 0x3c2 <__addsf3x+0x20>
 3c0:	e0 95       	com	r30
 3c2:	0b 2e       	mov	r0, r27
 3c4:	ba 2f       	mov	r27, r26
 3c6:	a0 2d       	mov	r26, r0
 3c8:	0b 01       	movw	r0, r22
 3ca:	b9 01       	movw	r22, r18
 3cc:	90 01       	movw	r18, r0
 3ce:	0c 01       	movw	r0, r24
 3d0:	ca 01       	movw	r24, r20
 3d2:	a0 01       	movw	r20, r0
 3d4:	11 24       	eor	r1, r1
 3d6:	ff 27       	eor	r31, r31
 3d8:	59 1b       	sub	r21, r25
 3da:	99 f0       	breq	.+38     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3dc:	59 3f       	cpi	r21, 0xF9	; 249
 3de:	50 f4       	brcc	.+20     	; 0x3f4 <__addsf3x+0x52>
 3e0:	50 3e       	cpi	r21, 0xE0	; 224
 3e2:	68 f1       	brcs	.+90     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 3e4:	1a 16       	cp	r1, r26
 3e6:	f0 40       	sbci	r31, 0x00	; 0
 3e8:	a2 2f       	mov	r26, r18
 3ea:	23 2f       	mov	r18, r19
 3ec:	34 2f       	mov	r19, r20
 3ee:	44 27       	eor	r20, r20
 3f0:	58 5f       	subi	r21, 0xF8	; 248
 3f2:	f3 cf       	rjmp	.-26     	; 0x3da <__addsf3x+0x38>
 3f4:	46 95       	lsr	r20
 3f6:	37 95       	ror	r19
 3f8:	27 95       	ror	r18
 3fa:	a7 95       	ror	r26
 3fc:	f0 40       	sbci	r31, 0x00	; 0
 3fe:	53 95       	inc	r21
 400:	c9 f7       	brne	.-14     	; 0x3f4 <__addsf3x+0x52>
 402:	7e f4       	brtc	.+30     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 404:	1f 16       	cp	r1, r31
 406:	ba 0b       	sbc	r27, r26
 408:	62 0b       	sbc	r22, r18
 40a:	73 0b       	sbc	r23, r19
 40c:	84 0b       	sbc	r24, r20
 40e:	ba f0       	brmi	.+46     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 410:	91 50       	subi	r25, 0x01	; 1
 412:	a1 f0       	breq	.+40     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 414:	ff 0f       	add	r31, r31
 416:	bb 1f       	adc	r27, r27
 418:	66 1f       	adc	r22, r22
 41a:	77 1f       	adc	r23, r23
 41c:	88 1f       	adc	r24, r24
 41e:	c2 f7       	brpl	.-16     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 420:	0e c0       	rjmp	.+28     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 422:	ba 0f       	add	r27, r26
 424:	62 1f       	adc	r22, r18
 426:	73 1f       	adc	r23, r19
 428:	84 1f       	adc	r24, r20
 42a:	48 f4       	brcc	.+18     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 42c:	87 95       	ror	r24
 42e:	77 95       	ror	r23
 430:	67 95       	ror	r22
 432:	b7 95       	ror	r27
 434:	f7 95       	ror	r31
 436:	9e 3f       	cpi	r25, 0xFE	; 254
 438:	08 f0       	brcs	.+2      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 43a:	b0 cf       	rjmp	.-160    	; 0x39c <__addsf3+0x28>
 43c:	93 95       	inc	r25
 43e:	88 0f       	add	r24, r24
 440:	08 f0       	brcs	.+2      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 442:	99 27       	eor	r25, r25
 444:	ee 0f       	add	r30, r30
 446:	97 95       	ror	r25
 448:	87 95       	ror	r24
 44a:	08 95       	ret

0000044c <__fixsfsi>:
 44c:	0e 94 2d 02 	call	0x45a	; 0x45a <__fixunssfsi>
 450:	68 94       	set
 452:	b1 11       	cpse	r27, r1
 454:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_szero>
 458:	08 95       	ret

0000045a <__fixunssfsi>:
 45a:	0e 94 c9 02 	call	0x592	; 0x592 <__fp_splitA>
 45e:	88 f0       	brcs	.+34     	; 0x482 <__fixunssfsi+0x28>
 460:	9f 57       	subi	r25, 0x7F	; 127
 462:	98 f0       	brcs	.+38     	; 0x48a <__fixunssfsi+0x30>
 464:	b9 2f       	mov	r27, r25
 466:	99 27       	eor	r25, r25
 468:	b7 51       	subi	r27, 0x17	; 23
 46a:	b0 f0       	brcs	.+44     	; 0x498 <__fixunssfsi+0x3e>
 46c:	e1 f0       	breq	.+56     	; 0x4a6 <__fixunssfsi+0x4c>
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	88 1f       	adc	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	1a f0       	brmi	.+6      	; 0x47e <__fixunssfsi+0x24>
 478:	ba 95       	dec	r27
 47a:	c9 f7       	brne	.-14     	; 0x46e <__fixunssfsi+0x14>
 47c:	14 c0       	rjmp	.+40     	; 0x4a6 <__fixunssfsi+0x4c>
 47e:	b1 30       	cpi	r27, 0x01	; 1
 480:	91 f0       	breq	.+36     	; 0x4a6 <__fixunssfsi+0x4c>
 482:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <__fp_zero>
 486:	b1 e0       	ldi	r27, 0x01	; 1
 488:	08 95       	ret
 48a:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__fp_zero>
 48e:	67 2f       	mov	r22, r23
 490:	78 2f       	mov	r23, r24
 492:	88 27       	eor	r24, r24
 494:	b8 5f       	subi	r27, 0xF8	; 248
 496:	39 f0       	breq	.+14     	; 0x4a6 <__fixunssfsi+0x4c>
 498:	b9 3f       	cpi	r27, 0xF9	; 249
 49a:	cc f3       	brlt	.-14     	; 0x48e <__fixunssfsi+0x34>
 49c:	86 95       	lsr	r24
 49e:	77 95       	ror	r23
 4a0:	67 95       	ror	r22
 4a2:	b3 95       	inc	r27
 4a4:	d9 f7       	brne	.-10     	; 0x49c <__fixunssfsi+0x42>
 4a6:	3e f4       	brtc	.+14     	; 0x4b6 <__fixunssfsi+0x5c>
 4a8:	90 95       	com	r25
 4aa:	80 95       	com	r24
 4ac:	70 95       	com	r23
 4ae:	61 95       	neg	r22
 4b0:	7f 4f       	sbci	r23, 0xFF	; 255
 4b2:	8f 4f       	sbci	r24, 0xFF	; 255
 4b4:	9f 4f       	sbci	r25, 0xFF	; 255
 4b6:	08 95       	ret

000004b8 <__floatunsisf>:
 4b8:	e8 94       	clt
 4ba:	09 c0       	rjmp	.+18     	; 0x4ce <__floatsisf+0x12>

000004bc <__floatsisf>:
 4bc:	97 fb       	bst	r25, 7
 4be:	3e f4       	brtc	.+14     	; 0x4ce <__floatsisf+0x12>
 4c0:	90 95       	com	r25
 4c2:	80 95       	com	r24
 4c4:	70 95       	com	r23
 4c6:	61 95       	neg	r22
 4c8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ca:	8f 4f       	sbci	r24, 0xFF	; 255
 4cc:	9f 4f       	sbci	r25, 0xFF	; 255
 4ce:	99 23       	and	r25, r25
 4d0:	a9 f0       	breq	.+42     	; 0x4fc <__floatsisf+0x40>
 4d2:	f9 2f       	mov	r31, r25
 4d4:	96 e9       	ldi	r25, 0x96	; 150
 4d6:	bb 27       	eor	r27, r27
 4d8:	93 95       	inc	r25
 4da:	f6 95       	lsr	r31
 4dc:	87 95       	ror	r24
 4de:	77 95       	ror	r23
 4e0:	67 95       	ror	r22
 4e2:	b7 95       	ror	r27
 4e4:	f1 11       	cpse	r31, r1
 4e6:	f8 cf       	rjmp	.-16     	; 0x4d8 <__floatsisf+0x1c>
 4e8:	fa f4       	brpl	.+62     	; 0x528 <__floatsisf+0x6c>
 4ea:	bb 0f       	add	r27, r27
 4ec:	11 f4       	brne	.+4      	; 0x4f2 <__floatsisf+0x36>
 4ee:	60 ff       	sbrs	r22, 0
 4f0:	1b c0       	rjmp	.+54     	; 0x528 <__floatsisf+0x6c>
 4f2:	6f 5f       	subi	r22, 0xFF	; 255
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255
 4f6:	8f 4f       	sbci	r24, 0xFF	; 255
 4f8:	9f 4f       	sbci	r25, 0xFF	; 255
 4fa:	16 c0       	rjmp	.+44     	; 0x528 <__floatsisf+0x6c>
 4fc:	88 23       	and	r24, r24
 4fe:	11 f0       	breq	.+4      	; 0x504 <__floatsisf+0x48>
 500:	96 e9       	ldi	r25, 0x96	; 150
 502:	11 c0       	rjmp	.+34     	; 0x526 <__floatsisf+0x6a>
 504:	77 23       	and	r23, r23
 506:	21 f0       	breq	.+8      	; 0x510 <__floatsisf+0x54>
 508:	9e e8       	ldi	r25, 0x8E	; 142
 50a:	87 2f       	mov	r24, r23
 50c:	76 2f       	mov	r23, r22
 50e:	05 c0       	rjmp	.+10     	; 0x51a <__floatsisf+0x5e>
 510:	66 23       	and	r22, r22
 512:	71 f0       	breq	.+28     	; 0x530 <__floatsisf+0x74>
 514:	96 e8       	ldi	r25, 0x86	; 134
 516:	86 2f       	mov	r24, r22
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	60 e0       	ldi	r22, 0x00	; 0
 51c:	2a f0       	brmi	.+10     	; 0x528 <__floatsisf+0x6c>
 51e:	9a 95       	dec	r25
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	88 1f       	adc	r24, r24
 526:	da f7       	brpl	.-10     	; 0x51e <__floatsisf+0x62>
 528:	88 0f       	add	r24, r24
 52a:	96 95       	lsr	r25
 52c:	87 95       	ror	r24
 52e:	97 f9       	bld	r25, 7
 530:	08 95       	ret

00000532 <__fp_inf>:
 532:	97 f9       	bld	r25, 7
 534:	9f 67       	ori	r25, 0x7F	; 127
 536:	80 e8       	ldi	r24, 0x80	; 128
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	08 95       	ret

0000053e <__fp_nan>:
 53e:	9f ef       	ldi	r25, 0xFF	; 255
 540:	80 ec       	ldi	r24, 0xC0	; 192
 542:	08 95       	ret

00000544 <__fp_pscA>:
 544:	00 24       	eor	r0, r0
 546:	0a 94       	dec	r0
 548:	16 16       	cp	r1, r22
 54a:	17 06       	cpc	r1, r23
 54c:	18 06       	cpc	r1, r24
 54e:	09 06       	cpc	r0, r25
 550:	08 95       	ret

00000552 <__fp_pscB>:
 552:	00 24       	eor	r0, r0
 554:	0a 94       	dec	r0
 556:	12 16       	cp	r1, r18
 558:	13 06       	cpc	r1, r19
 55a:	14 06       	cpc	r1, r20
 55c:	05 06       	cpc	r0, r21
 55e:	08 95       	ret

00000560 <__fp_round>:
 560:	09 2e       	mov	r0, r25
 562:	03 94       	inc	r0
 564:	00 0c       	add	r0, r0
 566:	11 f4       	brne	.+4      	; 0x56c <__fp_round+0xc>
 568:	88 23       	and	r24, r24
 56a:	52 f0       	brmi	.+20     	; 0x580 <__fp_round+0x20>
 56c:	bb 0f       	add	r27, r27
 56e:	40 f4       	brcc	.+16     	; 0x580 <__fp_round+0x20>
 570:	bf 2b       	or	r27, r31
 572:	11 f4       	brne	.+4      	; 0x578 <__fp_round+0x18>
 574:	60 ff       	sbrs	r22, 0
 576:	04 c0       	rjmp	.+8      	; 0x580 <__fp_round+0x20>
 578:	6f 5f       	subi	r22, 0xFF	; 255
 57a:	7f 4f       	sbci	r23, 0xFF	; 255
 57c:	8f 4f       	sbci	r24, 0xFF	; 255
 57e:	9f 4f       	sbci	r25, 0xFF	; 255
 580:	08 95       	ret

00000582 <__fp_split3>:
 582:	57 fd       	sbrc	r21, 7
 584:	90 58       	subi	r25, 0x80	; 128
 586:	44 0f       	add	r20, r20
 588:	55 1f       	adc	r21, r21
 58a:	59 f0       	breq	.+22     	; 0x5a2 <__fp_splitA+0x10>
 58c:	5f 3f       	cpi	r21, 0xFF	; 255
 58e:	71 f0       	breq	.+28     	; 0x5ac <__fp_splitA+0x1a>
 590:	47 95       	ror	r20

00000592 <__fp_splitA>:
 592:	88 0f       	add	r24, r24
 594:	97 fb       	bst	r25, 7
 596:	99 1f       	adc	r25, r25
 598:	61 f0       	breq	.+24     	; 0x5b2 <__fp_splitA+0x20>
 59a:	9f 3f       	cpi	r25, 0xFF	; 255
 59c:	79 f0       	breq	.+30     	; 0x5bc <__fp_splitA+0x2a>
 59e:	87 95       	ror	r24
 5a0:	08 95       	ret
 5a2:	12 16       	cp	r1, r18
 5a4:	13 06       	cpc	r1, r19
 5a6:	14 06       	cpc	r1, r20
 5a8:	55 1f       	adc	r21, r21
 5aa:	f2 cf       	rjmp	.-28     	; 0x590 <__fp_split3+0xe>
 5ac:	46 95       	lsr	r20
 5ae:	f1 df       	rcall	.-30     	; 0x592 <__fp_splitA>
 5b0:	08 c0       	rjmp	.+16     	; 0x5c2 <__fp_splitA+0x30>
 5b2:	16 16       	cp	r1, r22
 5b4:	17 06       	cpc	r1, r23
 5b6:	18 06       	cpc	r1, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	f1 cf       	rjmp	.-30     	; 0x59e <__fp_splitA+0xc>
 5bc:	86 95       	lsr	r24
 5be:	71 05       	cpc	r23, r1
 5c0:	61 05       	cpc	r22, r1
 5c2:	08 94       	sec
 5c4:	08 95       	ret

000005c6 <__fp_zero>:
 5c6:	e8 94       	clt

000005c8 <__fp_szero>:
 5c8:	bb 27       	eor	r27, r27
 5ca:	66 27       	eor	r22, r22
 5cc:	77 27       	eor	r23, r23
 5ce:	cb 01       	movw	r24, r22
 5d0:	97 f9       	bld	r25, 7
 5d2:	08 95       	ret

000005d4 <__gesf2>:
 5d4:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__fp_cmp>
 5d8:	08 f4       	brcc	.+2      	; 0x5dc <__gesf2+0x8>
 5da:	8f ef       	ldi	r24, 0xFF	; 255
 5dc:	08 95       	ret

000005de <__mulsf3>:
 5de:	0e 94 02 03 	call	0x604	; 0x604 <__mulsf3x>
 5e2:	0c 94 b0 02 	jmp	0x560	; 0x560 <__fp_round>
 5e6:	0e 94 a2 02 	call	0x544	; 0x544 <__fp_pscA>
 5ea:	38 f0       	brcs	.+14     	; 0x5fa <__mulsf3+0x1c>
 5ec:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_pscB>
 5f0:	20 f0       	brcs	.+8      	; 0x5fa <__mulsf3+0x1c>
 5f2:	95 23       	and	r25, r21
 5f4:	11 f0       	breq	.+4      	; 0x5fa <__mulsf3+0x1c>
 5f6:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_inf>
 5fa:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_nan>
 5fe:	11 24       	eor	r1, r1
 600:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_szero>

00000604 <__mulsf3x>:
 604:	0e 94 c1 02 	call	0x582	; 0x582 <__fp_split3>
 608:	70 f3       	brcs	.-36     	; 0x5e6 <__mulsf3+0x8>

0000060a <__mulsf3_pse>:
 60a:	95 9f       	mul	r25, r21
 60c:	c1 f3       	breq	.-16     	; 0x5fe <__mulsf3+0x20>
 60e:	95 0f       	add	r25, r21
 610:	50 e0       	ldi	r21, 0x00	; 0
 612:	55 1f       	adc	r21, r21
 614:	62 9f       	mul	r22, r18
 616:	f0 01       	movw	r30, r0
 618:	72 9f       	mul	r23, r18
 61a:	bb 27       	eor	r27, r27
 61c:	f0 0d       	add	r31, r0
 61e:	b1 1d       	adc	r27, r1
 620:	63 9f       	mul	r22, r19
 622:	aa 27       	eor	r26, r26
 624:	f0 0d       	add	r31, r0
 626:	b1 1d       	adc	r27, r1
 628:	aa 1f       	adc	r26, r26
 62a:	64 9f       	mul	r22, r20
 62c:	66 27       	eor	r22, r22
 62e:	b0 0d       	add	r27, r0
 630:	a1 1d       	adc	r26, r1
 632:	66 1f       	adc	r22, r22
 634:	82 9f       	mul	r24, r18
 636:	22 27       	eor	r18, r18
 638:	b0 0d       	add	r27, r0
 63a:	a1 1d       	adc	r26, r1
 63c:	62 1f       	adc	r22, r18
 63e:	73 9f       	mul	r23, r19
 640:	b0 0d       	add	r27, r0
 642:	a1 1d       	adc	r26, r1
 644:	62 1f       	adc	r22, r18
 646:	83 9f       	mul	r24, r19
 648:	a0 0d       	add	r26, r0
 64a:	61 1d       	adc	r22, r1
 64c:	22 1f       	adc	r18, r18
 64e:	74 9f       	mul	r23, r20
 650:	33 27       	eor	r19, r19
 652:	a0 0d       	add	r26, r0
 654:	61 1d       	adc	r22, r1
 656:	23 1f       	adc	r18, r19
 658:	84 9f       	mul	r24, r20
 65a:	60 0d       	add	r22, r0
 65c:	21 1d       	adc	r18, r1
 65e:	82 2f       	mov	r24, r18
 660:	76 2f       	mov	r23, r22
 662:	6a 2f       	mov	r22, r26
 664:	11 24       	eor	r1, r1
 666:	9f 57       	subi	r25, 0x7F	; 127
 668:	50 40       	sbci	r21, 0x00	; 0
 66a:	9a f0       	brmi	.+38     	; 0x692 <__mulsf3_pse+0x88>
 66c:	f1 f0       	breq	.+60     	; 0x6aa <__mulsf3_pse+0xa0>
 66e:	88 23       	and	r24, r24
 670:	4a f0       	brmi	.+18     	; 0x684 <__mulsf3_pse+0x7a>
 672:	ee 0f       	add	r30, r30
 674:	ff 1f       	adc	r31, r31
 676:	bb 1f       	adc	r27, r27
 678:	66 1f       	adc	r22, r22
 67a:	77 1f       	adc	r23, r23
 67c:	88 1f       	adc	r24, r24
 67e:	91 50       	subi	r25, 0x01	; 1
 680:	50 40       	sbci	r21, 0x00	; 0
 682:	a9 f7       	brne	.-22     	; 0x66e <__mulsf3_pse+0x64>
 684:	9e 3f       	cpi	r25, 0xFE	; 254
 686:	51 05       	cpc	r21, r1
 688:	80 f0       	brcs	.+32     	; 0x6aa <__mulsf3_pse+0xa0>
 68a:	0c 94 99 02 	jmp	0x532	; 0x532 <__fp_inf>
 68e:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_szero>
 692:	5f 3f       	cpi	r21, 0xFF	; 255
 694:	e4 f3       	brlt	.-8      	; 0x68e <__mulsf3_pse+0x84>
 696:	98 3e       	cpi	r25, 0xE8	; 232
 698:	d4 f3       	brlt	.-12     	; 0x68e <__mulsf3_pse+0x84>
 69a:	86 95       	lsr	r24
 69c:	77 95       	ror	r23
 69e:	67 95       	ror	r22
 6a0:	b7 95       	ror	r27
 6a2:	f7 95       	ror	r31
 6a4:	e7 95       	ror	r30
 6a6:	9f 5f       	subi	r25, 0xFF	; 255
 6a8:	c1 f7       	brne	.-16     	; 0x69a <__mulsf3_pse+0x90>
 6aa:	fe 2b       	or	r31, r30
 6ac:	88 0f       	add	r24, r24
 6ae:	91 1d       	adc	r25, r1
 6b0:	96 95       	lsr	r25
 6b2:	87 95       	ror	r24
 6b4:	97 f9       	bld	r25, 7
 6b6:	08 95       	ret

000006b8 <__fp_cmp>:
 6b8:	99 0f       	add	r25, r25
 6ba:	00 08       	sbc	r0, r0
 6bc:	55 0f       	add	r21, r21
 6be:	aa 0b       	sbc	r26, r26
 6c0:	e0 e8       	ldi	r30, 0x80	; 128
 6c2:	fe ef       	ldi	r31, 0xFE	; 254
 6c4:	16 16       	cp	r1, r22
 6c6:	17 06       	cpc	r1, r23
 6c8:	e8 07       	cpc	r30, r24
 6ca:	f9 07       	cpc	r31, r25
 6cc:	c0 f0       	brcs	.+48     	; 0x6fe <__fp_cmp+0x46>
 6ce:	12 16       	cp	r1, r18
 6d0:	13 06       	cpc	r1, r19
 6d2:	e4 07       	cpc	r30, r20
 6d4:	f5 07       	cpc	r31, r21
 6d6:	98 f0       	brcs	.+38     	; 0x6fe <__fp_cmp+0x46>
 6d8:	62 1b       	sub	r22, r18
 6da:	73 0b       	sbc	r23, r19
 6dc:	84 0b       	sbc	r24, r20
 6de:	95 0b       	sbc	r25, r21
 6e0:	39 f4       	brne	.+14     	; 0x6f0 <__fp_cmp+0x38>
 6e2:	0a 26       	eor	r0, r26
 6e4:	61 f0       	breq	.+24     	; 0x6fe <__fp_cmp+0x46>
 6e6:	23 2b       	or	r18, r19
 6e8:	24 2b       	or	r18, r20
 6ea:	25 2b       	or	r18, r21
 6ec:	21 f4       	brne	.+8      	; 0x6f6 <__fp_cmp+0x3e>
 6ee:	08 95       	ret
 6f0:	0a 26       	eor	r0, r26
 6f2:	09 f4       	brne	.+2      	; 0x6f6 <__fp_cmp+0x3e>
 6f4:	a1 40       	sbci	r26, 0x01	; 1
 6f6:	a6 95       	lsr	r26
 6f8:	8f ef       	ldi	r24, 0xFF	; 255
 6fa:	81 1d       	adc	r24, r1
 6fc:	81 1d       	adc	r24, r1
 6fe:	08 95       	ret

00000700 <_exit>:
 700:	f8 94       	cli

00000702 <__stop_program>:
 702:	ff cf       	rjmp	.-2      	; 0x702 <__stop_program>
